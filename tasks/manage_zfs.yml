---
- name: manage_zfs | checking existing zpool(s)
  shell: "zpool list | awk 'FNR >1' | awk '{print $1}'"
  changed_when: false
  register: zpools
  check_mode: no
  when: zfs_pools is defined

- name: manage_zfs | Gather ZPool Status
  shell: zpool status
  changed_when: false
  register: zpool_devices
  check_mode: no
  when: zfs_pools is defined

- name: manage_zfs | creating basic zpool(s)
  command: "zpool create {{ item.options | join (' ') if item.options is defined else '' }} {{ item.name }} {{ item.devices|join (' ') }}"
  register: zpool_created
  with_items: "{{ zfs_pools }}"
  when: >
        zfs_pools is defined and
        zfs_create_pools and
        (item.type == "basic" and
        item.name not in zpools.stdout and
        item.state == "present") and
        item.devices[0] not in zpool_devices.stdout and
        item.action|lower == "create"

- name: manage_zfs | adding basic zpool(s)
  command: "zpool add {{ item.options | join (' ') if item.options is defined else '' }} {{ item.name }} {{ item.devices|join (' ') }}"
  with_items: "{{ zfs_pools }}"
  when: >
        zfs_pools is defined and
        zfs_create_pools and
        (item.type == "basic" and
        item.state == "present") and
        (item.devices[0]|basename) not in zpool_devices.stdout and
        item.action|lower == "add" and
        (zpool_created.changed or item.name in zpools.stdout)

- name: manage_zfs | creating mirror/zraid zpool(s)
  command: "zpool create {{ item.options | join (' ') if item.options is defined else '' }} {{ item.name }} {{ item.type }} {{ item.devices|join (' ') }}"
  with_items: "{{ zfs_pools }}"
  register: zpool_created
  when: >
        zfs_pools is defined and
        zfs_create_pools and
        (item.type != "basic" and
        item.name not in zpools.stdout and
        item.state == "present") and
        item.devices[0] not in zpool_devices.stdout and
        item.action|lower == "create"

- name: manage_zfs | adding mirror/zraid zpool(s)
  command: "zpool add {{ item.options | join (' ') if item.options is defined else '' }} {{ item.name }} {{ item.type }} {{ item.devices|join (' ') }}"
  with_items: "{{ zfs_pools }}"
  when: >
        zfs_pools is defined and
        zfs_create_pools and
        (item.type != "basic" and
        item.state == "present") and
        (item.devices[0]|basename) not in zpool_devices.stdout and
        item.action|lower == "add" and
        (zpool_created.changed or item.name in zpools.stdout)

- name: manage_zfs | managing pools
  zfs:
    name: "{{ item.name }}"
    extra_zfs_properties:
      atime: "{{ item.atime|default(omit) }}"
      compression: "{{ item.compression|default(omit) }}"
      dedup: "{{ item.dedup|default(omit) }}"
      logbias: "{{ item.logbias|default(omit) }}"
      mountpoint: "{{ item.mountpoint|default(omit) }}"
      primarycache: "{{ item.primarycache|default(omit) }}"
      quota: "{{ item.quota|default(omit) }}"
      recordsize: "{{ item.recordsize|default(omit) }}"
      sharenfs: "{{ item.sharenfs|default(omit) }}"
      sync: "{{ item.sync|default(omit) }}"
      snapdev: "{{ item.snapdev|default('hidden')}}"
      snapdir: "{{ item.snapdir|default('hidden')}}"
    state: "{{ item.state }}"
  with_items: "{{ zfs_pools }}"
  when: zfs_create_pools

- name: Create secrets directory on Ansible controller
  file:
    path:  '{{ zfs__secret_path + "/" + item.name }}'
    state: 'directory'
      #owner: '{{ zfs__secret_owner }}'
      #group: '{{ zfs__secret_group }}'
      #mode:  '{{ zfs__secret_mode }}'
  become: False
  delegate_to: 'localhost'
  when: (item.encryption is defined and item.encryption | bool)
  with_items: '{{ zfs_filesystems|d([]) }}'

- name: Generate ZFS text/passphrase keyfile on the Ansible controller
  shell: 'set -o nounset -o pipefail -o errexit &&
          {{ item.keyfile_gen_command|d(zfs__keyfile_gen_command) }} \
          | tr -d "\n" > {{ (item.keyfile | d(zfs__secret_path + "/" + item.name + "/keyfile.raw")) | quote }}'
  args:
    executable: 'bash'
    creates: '{{ item.keyfile | d(zfs__secret_path + "/" + item.name + "/keyfile.raw") }}'
  become: False
  delegate_to: 'localhost'
  register: zfs__register_keyfile_gen
  when: (item.encryption is defined and item.encryption | bool)
  with_items: '{{ zfs_filesystems|d([]) }}'

    # If local keyfiles shall not have default permissions
    # - name: Enforce permissions of the keyfile on the Ansible controller
    #   file:
    #     path:  '{{ item.keyfile | d(zfs__secret_path + "/" + item.name + "/keyfile.raw") }}'
    #     owner: '{{ zfs__secret_owner }}'
    #     group: '{{ zfs__secret_group }}'
    #     mode:  '{{ zfs__secret_mode }}'
    #   become: False
    #   delegate_to: 'localhost'
    #   when: (item.encryption is defined and item.encryption | bool)
    #   with_items: '{{ zfs_filesystems|d([]) }}'
    #
- name: Ensure keyfile directory on remote system exists
  file:
    path:  '{{ zfs__keyfile_remote_location }}'
    state: 'directory'
      #owner: '{{ zfs__secret_owner }}'
      #group: '{{ zfs__secret_group }}'
      #mode:  '{{ zfs__secret_mode }}'
  when: (item.encryption is defined and item.encryption | bool)
  with_items: '{{ zfs_filesystems|d([]) }}'

- name: Copy keyfiles to remote system
  copy:
    dest: '{{ zfs__keyfile_remote_location + "/" + item.name + "_keyfile.raw" }}'
    backup:   '{{ item.keyfile_backup         | d(omit) }}'
    follow:   '{{ item.keyfile_follow         | d(omit) }}'
    force:    '{{ item.keyfile_force          | d(omit) }}'
    group:    '{{ item.keyfile_group          | d(zfs__keyfile_group) }}'
    mode:     '{{ item.keyfile_mode           | d(zfs__keyfile_mode) }}'
    owner:    '{{ item.keyfile_owner          | d(zfs__keyfile_owner) }}'
    selevel:  '{{ item.keyfile_selevel        | d(omit) }}'
    serole:   '{{ item.keyfile_serole         | d(omit) }}'
    setype:   '{{ item.keyfile_setype         | d(omit) }}'
    seuser:   '{{ item.keyfile_seuser         | d(omit) }}'
    src:      '{{ item.keyfile                | d(zfs__secret_path + "/" + item.name + "/keyfile.raw") }}'
    validate: '{{ item.keyfile_validate       | d(omit) }}'
  when: (item.encryption is defined and item.encryption | bool)
  with_items: '{{ zfs_filesystems|d([]) }}'
    #no_log: '{{ debops__no_log | d(True) }}'

- name: manage_zfs | checking existing datasets
  shell: "zfs list | awk 'FNR >1' | awk '{print $1}'"
  changed_when: false
  register: zfs_datasets
  check_mode: no
  when: zfs_pools is defined

- name: set fact if encrypted dataset
  set_fact:
    zfs_encryption_enabled: "{{ (zfs_encryption_enabled | default(false)) or item.encryption }}"
  with_items: "{{ zfs_filesystems }}"


- name: generate systemd service for zfs
  block:
  - name: generate systemd service for zfs-load-key
    template:
      src: usr/lib/systemd/system/zfs-load-key.service.j2
      dest: /usr/lib/systemd/system/zfs-load-key.service
      force: yes
      owner: root
      group: root
      mode: '0600'
  - name: enable systemd service for zfs-load-key
    systemd:
      name: zfs-load-key
      state: started
      enabled: yes
      daemon_reload: yes
  - name: overwrite zfs-mount service - create directory
    file:
      path: /etc/systemd/system/zfs-mount.service.d/
      state: directory
      owner: root
      group: root
      mode: 0755
  - name: copy overwrite zfs-mount service
    template:
      src: etc/systemd/system/zfs-mount.service.d/override.conf.j2
      dest: /etc/systemd/system/zfs-mount.service.d/override.conf
      owner: root
      group: root
      mode: 0644
  - name: Just force systemd to reread configs
    systemd:
      daemon_reload: yes
  when: zfs_encryption_enabled is defined and zfs_encryption_enabled

- name: manage_zfs | managing filesystems
  zfs:
    name: "{{ item.pool }}/{{ item.name }}"
    extra_zfs_properties:
      atime: "{{ item.atime|default(omit) }}"
      compression: "{{ item.compression|default(omit) }}"
      dedup: "{{ item.dedup|default(omit) }}"
      logbias: "{{ item.logbias|default(omit) }}"
      mountpoint: "{{ item.mountpoint|default(omit) }}"
      primarycache: "{{ item.primarycache|default(omit) }}"
      quota: "{{ item.quota|default(omit) }}"
      recordsize: "{{ item.recordsize|default(omit) }}"
      sharenfs: "{{ item.sharenfs|default(omit) }}"
      sync: "{{ item.sync|default(omit) }}"
      snapdev: "{{ item.snapdev|default('hidden')}}"
      snapdir: "{{ item.snapdir|default('hidden')}}"
      acltype: "{{ item.acltype|default(omit) }}"
      # encryption
      #encryption: "{{ 'on' if ( item.encryption is true and item.pool + '/' + item.name not in zfs_datasets.stdout_lines ) else omit }}"
      encryption: "{{ item.encryption if ( item.encryption|default(false) is not false and item.pool + '/' + item.name not in zfs_datasets.stdout_lines ) else omit }}"
      keyformat: "{{ 'passphrase' if ( item.encryption|default(false) is not false and item.pool + '/' + item.name not in zfs_datasets.stdout_lines ) else omit }}"
      keylocation: '{{ "file:///" + zfs__keyfile_remote_location + "/" + item.name + "_keyfile.raw" if item.encryption|default(false) is not false else omit }}'
    state: "{{ item.state }}"
  with_items: "{{ zfs_filesystems }}"
  when: zfs_create_filesystems

- name: manage_zfs | managing volumes
  zfs:
    name: "{{ item.pool }}/{{ item.name }}"
    extra_zfs_properties:
      compression: "{{ item.compression|default(omit) }}"
      dedup: "{{ item.dedup|default(omit) }}"
      quota: "{{ item.quota|default(omit) }}"
      primarycache: "{{ item.primarycache|default(omit) }}"
      recordsize: "{{ item.recordsize|default(omit) }}"
  #    shareiscsi: "{{ item.shareiscsi|default(omit) }}"
      sync: "{{ item.sync|default(omit) }}"
      logbias: "{{ item.logbias|default(omit) }}"
      volsize: "{{ item.volsize|default(omit) }}"
    state: "{{ item.state }}"
  notify:
    - restart iscsitarget
  with_items: "{{ zfs_volumes }}"
  when: zfs_create_volumes

- name: manage_zfs | Setting ZFS Filesystem Permissions
  file:
    path: "{{ item.mountpoint }}"
    mode: "{{ item.mode|default(omit) }}"
    owner: "{{ item.owner|default(omit) }}"
    group: "{{ item.group|default(omit) }}"
  with_items: "{{ zfs_filesystems }}"
  when: zfs_manage_filesystem_permissions

- name: manage_zfs | configuring iscsi devices
  template:
    src: etc/iet/ietd.conf.j2
    dest: /etc/iet/ietd.conf
    owner: root
    group: root
    mode: 0600
  notify:
    - restart iscsitarget
  when: >
        zfs_enable_iscsi is defined and
        zfs_enable_iscsi

- name: manage_zfs | configuring iscsi device access
  template:
    src: etc/iet/initiators.allow.j2
    dest: /etc/iet/initiators.allow
    owner: root
    group: root
    mode: 0644
  notify:
    - restart iscsitarget
  when: >
        zfs_enable_iscsi is defined and
        zfs_enable_iscsi

- name: manage_zfs | configuring iscsi targets access
  template:
    src: etc/iet/targets.allow.j2
    dest: /etc/iet/targets.allow
    owner: root
    group: root
    mode: 0644
  notify:
    - restart iscsitarget
  when: >
        zfs_enable_iscsi is defined and
        zfs_enable_iscsi
